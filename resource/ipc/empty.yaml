#DEFAULT: [$root(($TRAINING_EPOCH(TEST->$LEARNING(B->$C->A)))->PRINT()->$SAVE2($SAVE(U))->STATE(*PrintCommand->*PrintCommand)->STATE(*PrintCommand)->LEARNING(A->B->C)), $TRAINING_BATCH(E->F->$C->D)]
ADD: [$root(SAVE(SAVE1(SAVE2(U)->SAVE2()->SAVE1())))]

#DEFAULT: [$root($TRAINING_EPOCH)]
# "IDLE: STATE(TRAINING)"
# TRIANING: TRAINING_EPOCH() -> SAVE() -> TESTING()
# TRAINING_EPOCH: RUN->GRAPH(TRAINING_BATCH)->SAVE->STATE(TESTING) 1
# 언제까지 수행? -> StopIteration
# TRAINING_BATCH: RUN->PRINT_LOSS # 1번(parent state)
# TESTING: RUN->PRINT_LOSS
# 동작, 위상정렬 방식으로 동작한다?
# NODE:
#   command:
#   rerquired:
#   args:
#   repeat: 1
#   when: step:100
# STATE는 dataloaer와 ITER를 가진다. step과 epoch 값을 가짐. main state는 접근 가능하다. 현재 state와 main state는 접근 가능
# GRAPH는 Node들의 집합 상위 노드에 귀속되어, 상위 노드가 제거될떄까지 step이 증가한다. step과 epoch 값을 가짐
# Node는 하나의 오퍼레이션
#
# GRPAH는 repeat가 가능하다.
#
# Graph는 repeat만큼 반복을 수행한다. 이때, 만약 자기 자신이 parent와 동일한 경우, 내부의 모든 객체는 파괴된다.
# Node는 repeat만큼 수행된 후 종료된다.
DEFINE:
  PRINT:
    command: 'PrintCommand'
    required: []
    args: {
            content: 'hello world'
    }
    repeat: 3 # 10번 반복
    run_cycle: '$main'

  TRAINING_EPOCH:
    command: 'RunnableGraph'
    repeat: 10
    finish: True

  TRAINING_BATCH:
    command: 'RunnableGraph'
    inherit: PRINT

  TEST:
    inherit: PRINT

  LEARNING:
    command: 'RunnableGraph'
    inherit: PRINT
    repeat: 3
    finish: True

  SAVE:
    command: 'RunnableGraph'
    inherit: PRINT
    repeat: 3

  SAVE1:
    command: 'RunnableGraph'
    inherit: PRINT
    repeat: 1

  SAVE2:
    command: 'RunnableGraph'
    inherit: PRINT
    repeat: 2

  STATE:
    command: 'RunnableGraph'
    inherit: PRINT

  BATCH_EPOCH:
    args: {}
    repeat: 1 # IterStop을 기다림, 내 현재 처리중인 GRAPH의 repeat가 -1이라면, raise IterStop
    run_cycle: '' # $main $ngraph $my

  TESTING:
    inherit: PRINT
  A:
    inherit: PRINT
  B:
    inherit: PRINT
  C:
    inherit: PRINT
  D:
    inherit: PRINT
  E:
    inherit: PRINT
  F:
    inherit: PRINT
  U:
    inherit: PRINT
    run_cycle: '$self:20'

COMMAND_DEFINE:
  NEW_TYPE:
    command: 'PushModelStateCommand'
    required: ['training']
    state_name: START
    loader_name: 'idle'
    args: {}
    repeat: 1
    when: step # EPOCH:1

  TRAINING_LOADER:
    command: 'PushModelStateCommand'
    required: ['training']
    state_name: START
    loader_name: 'idle'
    args: {}
    repeat: 1
    when: step # EPOCH:1

  TRAINING_LOAD:
    command: 'ModuleLoadClass'
    required: ['MODEL']
    state_name: 'EPOCH_END'
    loader_name: training
    args:
      MODEL:
        path: $latest
        config_load: False
    repeat: -1
    when: step # EPOCH:1

  TRAINING_SAVE:
    command: 'ModuleSaveClass'
    required: ['MODEL']
    state_name: 'EPOCH_END'
    loader_name: training
    args:
      MODEL: {}
    repeat: -1
    when: step # EPOCH:1

  VALIDATION_LOADER:
    command: 'PushModelStateCommand'
    required: ['validation']
    state_name: EPOCH_END
    loader_name: training
    args: {}
    repeat: -1
    when: epoch # EPOCH:1
  PrintAllState:
    command: 'PrintStateCommand'
    required: ['step', 'epoch', 'state_name']
    args: {}
    repeat: -1
    when: step # EPOCH:1
  train_step:
    command: 'RunCommand'
    required: ['train']
    loader_name: 'training'
    state_name: BATCH_START
    args: {}
    repeat: -1
    when: step # EPOCH:1
  val_step:
    command: 'RunCommand'
    required: ['test']
    loader_name: 'validation'
    state_name: BATCH_START
    args: {}
    repeat: -1
    when: step # EPOCH:1
  PRINT:
    command: 'PrintCommand'
    required: []
    args: {'content':'name 1'}
    state_name: null
    loader_name: null
    repeat: 10
    when: step # EPOCH:1
  PRINT2:
    parent: 'PRINT'
    args: {'content':'name 2', 'test':{'a':3}}
    state_name: 'RUN'
    repeat: 3
    when: step:100 # EPOCH:1
  TRAINING_OUTPUT_SHOW:
    command: 'BatchedImageShowCommand'
    required: ['OUTPUT']
    args: {
      batch_number: 0
    }
    state_name: EPOCH_END
    loader_name: training
    repeat: 1
    when: epoch # EPOCH:1
  TRAINING_OUTPUT_SAVE:
    command: 'BatchedImageSaveCommand'
    required: ['OUTPUT']
    args:
      path: '$base/visual/img'
      format: 'png'
    state_name: BATCH_END
    loader_name: training
    repeat: -1
    when: step:10 # EPOCH:1